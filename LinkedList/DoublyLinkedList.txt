class Node: 
    def __init__(self, val):
        self.val = val
        self.prev = None
        self.next = None

class DoublyLinkedList:

    def __init__(self):
        self.head = None

    def insert_at_start(self, new_val):
        my_node = Node(new_val)

        my_node.next = self.head

        if self.head is not None:
            self.head.prev = my_node

        self.head = my_node

    def insert_at_position(self, prev_node, new_val):

        # check if prev_node exisits or not

        my_node = Node(new_val)

        my_node.next = prev_node.next
        prev_node.next = my_node

        my_node.prev = prev_node

        if my_node.next is not None:
            my_node.next.prev = my_node

    def insert_a_tail(self, new_val):
        my_node = Node(new_val)

        last = self.head

        my_node.next = None

        if self.head is None:
            my_node.prev = None #head
            self.head = my_node
            return

        while(last.next is not None):
            last = last.next

        last.next = my_node
        my_node.prev = last


    def delete(self, dv):
        if self.head == dv:
            self.head = dv.next

        if dv.next is not None:
            dv.next.prev = dv.prev

        if dv.prev is not None:
            dv.prev.next = dv.next


    def reverse(self):
        #check

        temp = None
        traveller = self.head

        while traveller is not None:
            temp = traveller.prev
            traveller.prev = traveller.next
            traveller.next = temp
            #imp
            traveller = traveller.prev

        if temp is not None:
            self.head = temp.prev